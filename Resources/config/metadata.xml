<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <parameters>
        <parameter key="rollerworks_record_filter.metadata.file_locator_class">Metadata\Driver\FileLocator</parameter>
        <parameter key="rollerworks_record_filter.metadata_factory.class">Metadata\MetadataFactory</parameter>
        <parameter key="rollerworks_record_filter.metadata.cache.class">Metadata\Cache\FileCache</parameter>
        <parameter key="rollerworks_record_filter.metadata.loader.loader_chain.class">Metadata\Driver\DriverChain</parameter>
        <parameter key="rollerworks_record_filter.metadata.loader.annotation_loader.class">Rollerworks\Bundle\RecordFilterBundle\Metadata\Loader\AnnotationDriver</parameter>
        <parameter key="rollerworks_record_filter.metadata.loader.xml_files_loader.class">Rollerworks\Bundle\RecordFilterBundle\Metadata\Loader\XmlFileLoader</parameter>
        <parameter key="rollerworks_record_filter.metadata.loader.yaml_files_loader.class">Rollerworks\Bundle\RecordFilterBundle\Metadata\Loader\YamlFileLoader</parameter>
        <parameter key="rollerworks_record_filter.metadata.loader.metadata_files" type="collection" />
    </parameters>

    <services>

        <service id="rollerworks_record_filter.metadata_factory" class="%rollerworks_record_filter.metadata_factory.class%" public="false">
            <argument type="service" id="rollerworks_record_filter.metadata.loader.loader_chain"/>
            <call method="setCache">
                <argument type="service" id="rollerworks_record_filter.metadata.cache"/>
            </call>
        </service>

        <service id="rollerworks_record_filter.metadata.cache" class="%rollerworks_record_filter.metadata.cache.class%" public="false">
            <argument/> <!-- the cache directory (to be set later) -->
        </service>

        <service id="rollerworks_record_filter.metadata.loader.annotation_loader" class="%rollerworks_record_filter.metadata.loader.annotation_loader.class%" public="false">
            <argument type="service" id="annotation_reader" />
        </service>

        <service id="rollerworks_record_filter.metadata.loader.loader_chain" class="%rollerworks_record_filter.metadata.loader.loader_chain.class%" public="false">
            <argument type="collection">
                <argument type="service" id="rollerworks_record_filter.metadata.loader.annotation_loader"/>
                <argument type="service" id="rollerworks_record_filter.metadata.loader.xml_files_loader"/>
                <argument type="service" id="rollerworks_record_filter.metadata.loader.yaml_files_loader"/>
            </argument>
        </service>

        <service id="rollerworks_record_filter.metadata.file_locator" class="%rollerworks_record_filter.metadata.file_locator_class%">
            <argument>%rollerworks_record_filter.metadata.loader.metadata_files%</argument><!-- collection of directories -->
        </service>

        <service id="rollerworks_record_filter.metadata.loader.xml_files_loader" class="%rollerworks_record_filter.metadata.loader.xml_files_loader.class%" public="false">
            <argument type="service" id="rollerworks_record_filter.metadata.file_locator" />
        </service>

        <service id="rollerworks_record_filter.metadata.loader.yaml_files_loader" class="%rollerworks_record_filter.metadata.loader.yaml_files_loader.class%" public="false">
            <argument type="service" id="rollerworks_record_filter.metadata.file_locator" />
        </service>

    </services>
</container>
